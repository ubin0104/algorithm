//BOJ 20924 - 첫번째 풀이
//3 가지 재귀 함수 사용 : make_tree, find_pole, find_max_branch
//입력에서 저장한 인접리스트는 [노드] = { 자식, 부모, 자식 } 이런식이다. 즉, 말그대로 인접했다는 정보만 담고 있을 뿐, 부모와 자식 구분은 되어 있지 않은 것이다. 따라서 make_tree 함수를 통해 루트부터 시작하여 타고 내려가 [부모노드] = { 자식, 자식 } 이렇게 확실히 자식 노드 정보만 담을 수 있도록 새로운 인접 리스트 tree 를 만들어주었고 이걸 find_pole, find_max_branch 에 사용 하였다.

#include <bits/stdc++.h>

using namespace std;

struct Node { int next, cost; }; // 구조체 안쓰고 cost 정적 이차원 배열 따로 만들어서 사용했는데 메모리 초과가 발생하였다. 안쓰는 공간이 너무 많아져서 그런 듯 하다. 구조체로 바꾸고 jagged array 형태로 바꾸니 메모리 초과는 해결함
vector<vector<Node>> adj_list; // [노드] = { 자식, 부모, 자식 }
vector<vector<Node>> tree; // [부모노드] = { 자식, 자식 }
int Giga, pole, branch; // giga 가 이미 C++ 라이브러리에 있는..건가 보다. giga 라고 하니 모호함 떠서 Giga 라고 해줌 ㅠ

void make_tree(int now, int parent) {
	for (int i = 0; i < adj_list[now].size(); ++i) {
		int next = adj_list[now][i].next;
		if (next != parent) {
			tree[now].push_back(adj_list[now][i]);
			make_tree(next, now);
		}
	}
}

void find_pole(int now, int sum) {
    // 기가 노드를 발견했거나 리프 노드에 도달했을때 (이땐 기가 노드가 없는 경우)
	if (tree[now].size() >= 2 || tree[now].empty()) {
		Giga = now;
		pole = sum;
		return;
	}

    // 기둥은 자식이 1 개
	int next = tree[now][0].next;
	int nextCost = tree[now][0].cost;
	find_pole(next, sum + nextCost);
}

void find_max_branch(int now, int sum) { 
    // 리프노드에 도달
    // 기가 노드가 없는 경우에도 find_max_branch 호출하자마자 바로 이곳에 걸리게 된다. 그래서 자연스럽게 branch 는 0 이 된다.
	if (tree[now].empty()) {
		branch = max(branch, sum);
		return;
	}

	for (int i = 0; i < tree[now].size(); ++i) {
		int next = tree[now][i].next;
		int nextCost = tree[now][i].cost;
		find_max_branch(next, sum + nextCost);
	}
}

int main() {
	//freopen("input.txt", "r", stdin);
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	int N, R;
	cin >> N >> R;

	adj_list.resize(N + 1);
	tree.resize(N + 1);
	for (int i = 1; i <= N - 1; ++i) {
		int node1, node2, cost;
		cin >> node1 >> node2 >> cost;

		adj_list[node1].push_back({ node2, cost });
		adj_list[node2].push_back({ node1, cost });
	}

	make_tree(R, R); 
	find_pole(R, 0);
	find_max_branch(Giga, 0);

	cout << pole << ' ' << branch;
}