#include<bits/stdc++.h>

using namespace std;

int n, m;
int memo[510];
vector<int> v[510];

bool dfs(int x,int prev);

int main()
{
	int cnt, t = 1;
	while (true) {
		cnt = 0;
		int x, y;
		cin >> n >> m;
		if (n == 0 && m == 0)break;
		for (int i = 0; i < m; i++) {
			cin >> x >> y;
			v[x].push_back(y);
			v[y].push_back(x);
		}
		for (int i = 1; i <= n; i++)
			if (!memo[i]) {
				if (dfs(i, -1)) cnt++;
			}
		if (cnt == 1)
			printf("Case %d: There is one tree.", t);
		else if(cnt>1)
			printf("Case %d: A forest of %d trees.", t,cnt);
		else
			printf("Case %d: No trees.", t);
		cout << "\n";
		memset(memo, 0, sizeof(memo));
		for (int i = 1; i <= n; i++)
			v[i].clear();
		t++;
	}
	return 0;
}
bool dfs(int x,int prev)
{
	bool ret = true;
	if (memo[x] == 1) 
		return false; 	
	memo[x] = 1;
	for (int i = 0; i < v[x].size(); i++)
		if(prev!=v[x][i])
			ret &= dfs(v[x][i],x);
	return ret;
}